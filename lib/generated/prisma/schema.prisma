// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GalleryItem {
  id          Int     @id @default(autoincrement())
  title       String
  image       String
  description String?
}

model User {
  id           String   @id @default(cuid())
  kindeId      String   @unique
  email        String   @unique
  firstName    String?
  lastName     String?
  profileImage String?
  role         String   @default("user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Employee {
  id           String      @id @default(cuid())
  name         String
  position     String
  email        String?     @unique
  phone        String?
  bio          String?     @db.Text
  imageUrl     String?
  funFact      String?     @db.Text
  status       String      @default("Active")
  startDate    DateTime    @default(now())
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Department {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  employees   Employee[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model MenuItem {
  id              String           @id @default(uuid())
  name            String
  description     String
  price           Float
  image           String
  categoryId      String
  category        Category         @relation(fields: [categoryId], references: [id])
  ingredients     String[]
  nutritionalInfo NutritionalInfo?
  isVegan         Boolean
  isGlutenFree    Boolean
  isPopular       Boolean
  isNew           Boolean
  reviews         Review[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Category {
  id           String     @id @default(uuid())
  name         String     @unique
  description  String?
  image        String?
  menuItems    MenuItem[]
  isActive     Boolean    @default(true)
  displayOrder Int        @default(999)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model NutritionalInfo {
  id         String    @id @default(uuid())
  calories   Int
  protein    Int
  carbs      Int
  fat        Int
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String
  author     String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
